   @Test
    fun fullyApproved() {
        // GIVEN
        val events = mutableListOf<Event>()
        events.add(GiftRegisteredEvent(DEFAULT_FUNDING_ID, 100.0))

        // WHEN
        val command = ApproveSupportRequestCommand(
            fundingId = FUNDING_ID,
            requestId = REQUEST_ID,
            amount =  100.0,
        )

        // THEN
        val expectedEvents = mutableListOf<Event>()
        expectedEvents.add(SupportApprovedEvent(
            fundingId = CONTRIBUTION_ID,
            requestId = REQUEST_ID,
            amount = 100.0,
        )
        )

        fixture
            .given(events)
            .`when`(command)
            .expectSuccessfulHandlerExecution()
            .expectEvents(*expectedEvents.toTypedArray())

    }

    @Test
    fun partiallyApproved() {
        // GIVEN
        val events = mutableListOf<Event>()
        events.add(GiftRegisteredEvent(DEFAULT_FUNDING_ID, 80.0))

        // WHEN
        val command = ApproveSupportRequestCommand(
            fundingId = FUNDING_ID,
            requestId = REQUEST_ID,
            amount =  100.0,
        )

        // THEN
        val expectedEvents = mutableListOf<Event>()
        expectedEvents.add(SupportApprovedEvent(
            fundingId = CONTRIBUTION_ID,
            requestId = REQUEST_ID,
            amount = 80.0,
        )
        )
        expectedEvents.add(SupportWaitForFundingEvent(FUNDING_ID, REQUEST_ID, 20.0))

        fixture
            .given(events)
            .`when`(command)
            .expectSuccessfulHandlerExecution()
            .expectEvents(*expectedEvents.toTypedArray())
    }

    @Test
    fun noneApproved() {

        // GIVEN

        // WHEN
        val command = ApproveSupportRequestCommand(
            fundingId = FUNDING_ID,
            requestId = REQUEST_ID,
            amount =  100.0,
        )

        // THEN
        val expectedEvents = mutableListOf<Event>()
        expectedEvents.add(SupportWaitForFundingEvent(FUNDING_ID, REQUEST_ID, 100.0))

        fixture
            .givenNoPriorActivity()
            .`when`(command)
            .expectSuccessfulHandlerExecution()
            .expectEvents(*expectedEvents.toTypedArray())
    }